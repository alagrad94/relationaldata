(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const DOMBuilder = {
  buildPoliticianCards(politicianObject) {
    let outputArticle = $("#output");
    let politicianArticle = document.createElement("article");
    politicianArticle.classList.add("politician");
    let politicianHeader = document.createElement("header");
    politicianHeader.classList.add("politician__name");
    let politicianH1 = document.createElement("h1");
    politicianH1.textContent = politicianObject.name;
    let billsSection = document.createElement("section");
    billsSection.classList.add("politician__bills");
    let billsSectionTitle = document.createElement("h3");
    billsSectionTitle.textContent = "Sponsored Bills";
    let pacsSection = document.createElement("section");
    pacsSection.classList.add("politician__influencers");
    let pacsSectionTitle = document.createElement("h3");
    pacsSectionTitle.textContent = "Related PACs";
    let pacsUL = document.createElement("ul");
    let corpsSection = document.createElement("section");
    corpsSection.classList.add("politician__influencers");
    let corpsSectionTitle = document.createElement("h3");
    corpsSectionTitle.textContent = "Related Corporations";
    let corpsUL = document.createElement("ul");
    outputArticle.append(politicianArticle);
    politicianArticle.appendChild(politicianHeader);
    politicianHeader.appendChild(politicianH1);
    billsSection.appendChild(billsSectionTitle);
    politicianArticle.appendChild(billsSection);
    pacsSection.appendChild(pacsSectionTitle);
    politicianArticle.appendChild(pacsSection);
    corpsSection.appendChild(corpsSectionTitle);
    politicianArticle.appendChild(corpsSection);
    politicianArticle.appendChild(pacsUL);
    politicianArticle.appendChild(corpsUL);
    politicianObject.bills.forEach(bill => {
      let billDiv = document.createElement("div");
      let billTitle = document.createElement("h4");
      billTitle.textContent = bill;
      let billInterestUL = document.createElement("ul");
      let billInterestLI = document.createElement("li");
      billInterestLI.textContent = politicianObject.interests;
      billsSection.appendChild(billDiv);
      billDiv.appendChild(billTitle);
      billDiv.appendChild(billInterestUL);
      billInterestUL.appendChild(billInterestLI);
    });

    for (let i = 0; i < politicianObject.PACS.length; i++) {
      const pac = politicianObject.PACS[i];
      let relatedPacsLI = document.createElement("li");
      relatedPacsLI.textContent = pac;
      pacsUL.appendChild(relatedPacsLI);
    }

    for (let i = 0; i < politicianObject.Corps.length; i++) {
      const corp = politicianObject.Corps[i];
      let relatedCorpsLI = document.createElement("li");
      relatedCorpsLI.textContent = corp;
      corpsUL.appendChild(relatedCorpsLI);
    }
  }

};
var _default = DOMBuilder;
exports.default = _default;

},{}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _DOMBuilder = _interopRequireDefault(require("./DOMBuilder"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const data = {
  buildPoliticianObject() {
    $.ajax({
      dataType: 'json',
      url: "http://localhost:8088/database"
    }).done(function success(database) {
      let politicians = database.politicians;
      let bills = database.bills;
      let pacs = database.pacs;
      let corps = database.corporations;
      let interests = database.interests;

      for (let i = 0; i < politicians.length; i++) {
        const politician = politicians[i];
        let polNumber = politician.PolId;
        let polName = politician.name;
        let billNames = [];
        let interestName = "";
        let pacsNames = [];
        let corpNames = [];

        for (let j = 0; j < bills.length; j++) {
          const bill = bills[j];
          const billArray = bill.PolId;

          if (billArray.includes(polNumber)) {
            for (let k = 0; k < interests.length; k++) {
              const interest = interests[k];

              if (bill.IntId = interest.IntId) {
                interestName = interest.name;
              }
            }

            billNames.push(bill.name);
          }
        }

        for (let l = 0; l < pacs.length; l++) {
          const pac = pacs[l];
          const pacArray = pac.PolId;
          const pacNumber = pac.PACId;

          if (pacArray.includes(polNumber)) {
            for (let m = 0; m < corps.length; m++) {
              const corp = corps[m];
              const corpArray = corp.PACId;

              if (corpNames.indexOf(corp.name) === -1 && corpArray.includes(pacNumber)) {
                corpNames.push(corp.name);
              }
            }

            pacsNames.push(pac.name);
          }
        }

        let politicianObject = {
          "name": polName,
          "bills": billNames,
          "interests": interestName,
          "PACS": pacsNames,
          "Corps": corpNames
        };

        _DOMBuilder.default.buildPoliticianCards(politicianObject);
      }
    });
  }

};
var _default = data;
exports.default = _default;

},{"./DOMBuilder":1}],3:[function(require,module,exports){
"use strict";

var _data = _interopRequireDefault(require("./data"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_data.default.buildPoliticianObject();

},{"./data":2}]},{},[3])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
